
# to use as template for export to SQLlite

import lxml.etree as etree
from collections import Counter
import unicodedata

with open('./joined1886allbooks.xml') as fobj:
    xml = fobj.read()

root = etree.fromstring(xml)
      
def nodes():
    nodes = []
    for element in root.xpath('//section'):
        node = [x for x in element.xpath('p/* | p | ../titleGroup/title/trGroup | ../titleGroup/title/annotation')]
        nodes.extend(node)
    return nodes 

def verses(nodes):
    verse = []
    annots = []
    for i,item in enumerate(nodes):
        # catches book title annotations
        # if item.tag == 'annotation' and '.0.0' in item.attrib['oxesRef']:
        #     verse = item.attrib['oxesRef'] + '*'
        #     verse += ''.join(item.xpath('notationQuote/para/span/text()')) + '*'
        
        # start of verse block, resets verse variable
        if item.tag == 'verseStart':
            ref = item.attrib['ID']
            verse = []
            annots = []

        if item.tag == 'annotation' and \
            'Misc' not in item.xpath('notationCategories/category/text()') and \
            'NoNote' not in item.xpath('notationCategories/category/text()'):
            annot = item.xpath('notationQuote/para/span/text()')
            annots.append(unicodedata.normalize('NFC', annot[0]))
        # if item.tag == 'p' and i != 0:
        #     verse.append(' \p ')
        if item.tag == 'trGroup':
            verse.extend(item.xpath('tr/text()'))
            # # catches and prints title
            # if '.0.0' in verse:
            #     print(verse)
        # end of verse block
        if item.tag == 'verseEnd':
            # runs QA - checks if annotation term exists in verse
            verse = unicodedata.normalize('NFC', ' '.join(verse))
            match = [x for x in annots if x.lower() not in verse.lower()]
            if len(match) > 0: print(f"{ref},{match},{verse}")
            verse = []

node_items = nodes()
verses(node_items)