# -*- coding: utf-8 -*-
#
#   OSM.py
#    - A FlexTools Module -
#
#   Working with OSM project.
#
#   stevan_vanderwerf@sil.org
#   April 2020
#
#   Platforms: Python .NET and IronPython
#

import unicodedata
from FTModuleClass import *
import FLExFDO
from SIL.FieldWorks.FDO import (IScrBookRepository, IScrBook, IScriptureRepository, 
ILangProjectRepository, IScripture, IScriptureRepository, IStPara, 
IStParaRepository, IStText, IStTextRepository, IScrSection, IScrSectionRepository)

from SILUBS.SharedScrUtils import *

from SIL.FieldWorks.Common.COMInterfaces import ITsString
from SIL.FieldWorks.FDO.DomainServices import SegmentServices
import codecs
import re
import sys, os
import xml.etree.ElementTree as ET
from xml.dom import minidom
from datetime import datetime
import os
import getpass

#----------------------------------------------------------------
# Documentation that the user sees:        

docs = {FTM_Name        : "OSM",
        FTM_Version     : 1,
        FTM_ModifiesDB  : False,
        FTM_Synopsis    : "working with OSM project",
        FTM_Description :
u"""
Working with OSM project

Scripture Repository > ScriptureBookOS (IScrBook) > TitleOA (StText) > ParagraphOS (IStPara) > Text (ITsString) = "Rût"
TODO - add options for AllBooks, FilteredBooks, SingleBook - line 458 471
""" }
                 
#----------------------------------------------------------------
# The main processing function

def MainFunction(DB, report, modifyAllowed):
                
    #--------UTIL-FUNCTIONS/METHODS--------------------------------    
        
    #https://stackoverflow.com/questions/9573244/how-to-check-if-the-string-is-empty
    #proper way to check is string is null in python    
    def isBlank (string):
        # return not (string and string.strip())
        return not string                    
    #----------------------------------------------------------------

    #https://github.com/sillsdev/FieldWorks/blob/hotfix/8.3.14/Src/TE/TeImportExport/ExportXml.cs
    ####<oxes>####  line 280 - 295
    oxes = ET.Element("oxes")
    oxes.set('xmnls', 'http://www.wycliffe.net/scripture/namespace/version_1.1.4')      

    def ExportTE():         
        
        #<oxesText>
        oxesText = ET.SubElement(oxes, 'oxesText')        
        oxesText.set('canonical', 'true')
        oxesText.set('xml:lang', 'tr')        
        oxesText.set('oxesIDWork', 'WBT.tr')        
        oxesText.set('type', 'Wycliffe-1.1.4')
        
    ####<header>#### #line 333 - 375        
        header = ET.SubElement(oxesText, 'header')
        #<revisionDesc resp="wor">
        revisionDesc = ET.SubElement(header, 'revisionDesc', resp='wor')

        #<date>
        todaysdate = datetime.now()
        dateForm = str(todaysdate.strftime("%Y.%m.%d"))        
        datetoday = ET.SubElement(revisionDesc, 'date')
        datetoday.text = dateForm

        def projectName(): #is there another easier way? dbName?
            projectsPath = FLExFDO.FwDirectoryFinder.ProjectsDirectory
            objs = os.listdir(unicode(projectsPath))
            dbList = []
            for f in objs:
                # if os.path.isdir(os.path.join(projectsPath, f)):
                    # dbList.append(f)
                g = os.path.join(projectsPath, f)
                dbList.append(g)
            projectDir = max(dbList, key=os.path.getatime)
            for h in os.listdir(unicode(projectDir)):
                if h.endswith(".fwdata"):
                    filenameNoext = os.path.splitext(h)[0]
                    report.Info("current project is: %s" % filenameNoext)
                    return filenameNoext 
        
        #<para xml:lang="en">
        domain = os.environ['userdomain'] + '\\' + getpass.getuser()                 
        longDate = str(todaysdate.strftime("%B %d, %Y at %I:%M %p"))
        string = projectName() + " exported by " + domain + " on " + longDate
        para = ET.SubElement(revisionDesc, 'para')
        para.set('xml:lang','en')
        para.text = string
        
        #<work oxesWork="WBT.tr">
        work = ET.SubElement(header, 'work', oxesWork='WBT.tr')
        #<titleGroup>
        titleGroup = ET.SubElement(work, 'titleGroup')        
        #<title type="main">
        title = ET.SubElement(titleGroup, 'title', type='main')
        #<trGroup>
        trGroup = ET.SubElement(title, 'trGroup')
        #<tr>
        tr = ET.SubElement(trGroup, 'tr')
        tr.text = "TODO: title of New Testament or Bible goes here"
        
        #<contributor role="Translator" ID="wor">DESKTOP-HLVGD70\workother</contributor>
        contributor = ET.SubElement(work, 'contributor')
        contributor.set('ID', 'wor')        
        contributor.set('role', 'Translator')
        contributor.text = domain  
    
    ####<titlePage>####    #line 403 - 423
        titlePage = ET.SubElement(oxesText, 'titlePage')
        #<titleGroup>
        titleGroup = ET.SubElement(titlePage, 'titleGroup')        
        #<title type="main">
        title = ET.SubElement(titleGroup, 'title', type='main')
        #<trGroup>
        trGroup = ET.SubElement(title, 'trGroup')
        #<tr>
        tr = ET.SubElement(trGroup, 'tr')
        tr.text = "TODO: title of New Testament or Bible goes here"        

    #----------------------------------------------------------------                     
    
    def ExportScripture():
        
        sCanon = None
        #iterate through ScriptureBooksOS object for AllBooks
        #TODO - give options for single books or filtered books - will have to build this myself since FLEx can't be open while this is run
        for obj in DB.ObjectsIn(ILangProjectRepository):            
            bookCount = obj.TranslatedScriptureOA.ScriptureBooksOS.Count
            for i, book in enumerate(obj.TranslatedScriptureOA.ScriptureBooksOS):
                ExportBook(book, i)                                 

    #----------------------------------------------------------------   

    def ExportBook(book, i):            
        
        def canonExists(oxes, sCanon):  #check for existence of canon tag
            for i in oxes.findall('.//oxesText'): 
                for j in i.findall('./canon[@ID="%s"]' % sCanon):
                    return j

        def createCanon(oxes, sCanon):  #create canon tag 
            if canonExists(oxes, sCanon) == None:
                oxesText = oxes.find('.//oxesText')
                canon = ET.SubElement(oxesText, 'canon', ID=sCanon)                            
        
        m_iCurrentBook = book.CanonicalNum
        m_sCurrentBookId = book.BookId  
               
        #conditional ternary operator - set the canon value
        sCanon = 'ot' if book.CanonicalNum < 40 else 'nt'
        
        createCanon(oxes, sCanon)
        #creates book tag
        bookElement = ET.SubElement(canonExists(oxes, sCanon), 'book', ID=m_sCurrentBookId)   

        ExportBookTitle(book, bookElement, i)
    #----------------------------------------------------------------         
     
    def ExportBookTitle(book, bookElement, i):
        
        report.Info("test is: ")
        test = ITsString(book.Name.BestVernacularAlternative).Text   
        report.Info(test) 
        
        #book = book[i]   
        report.Info("book is: %s" % book)
        report.Info("i is: %s" % i)            
        
        titleIndex = []
        sectionHeadIndex = []  
        titleGroupIndex = []
        headingFinalIndex = []
        def titleGroup():   #Sifr-İ Raʿos 

            for i in DB.ObjectsIn(ILangProjectRepository):            
                for j in i.TranslatedScriptureOA.ScriptureBooksOS:
                    titleGroupBookname = ITsString(j.Name.BestVernacularAlternative).Text   
                    titleGroupIndex.append(titleGroupBookname)
                    for section in j.SectionsOS:
                        endRef = section.VerseRefEnd
                        titleIndex.append(endRef)
                        if endRef == 8002023:
                            for heading in section.HeadingOA.ParagraphsOS:
                                headingFinal = ITsString(heading.Contents).Text
                                headingFinalIndex.append(headingFinalIndex)                       
                    for c in j.TitleOA.ParagraphsOS:  
                        sectionHeader = ITsString(c.Contents).Text
                        sectionHeadIndex.append(sectionHeader)                    

            #unicodedecodeerror in python ??
            # for a in book.HeadingOA.ParagraphsOS:
                # #report.Info("book is: %s" % book)
                # titleGroupBookname = 'text' #ITsString(a.Contents).Text
                # return titleGroupBookname
        
        # sectionHeadIndex = []        
        # def sectionHead():  #Rût
        
            # for a in DB.ObjectsIn(IScriptureRepository):
                # for b in a.ScriptureBooksOS:
                    # for c in b.TitleOA.ParagraphsOS:  
                        # sectionHeader = ITsString(c.Contents).Text
                        # sectionHeadIndex.append(sectionHeader)

            # for i in book.TitleOA:
                # # for j in i.ScriptureBooksOS:
                    # # for k in j.TitleOA.ParagraphsOS:  
                # sectionHeader = ITsString(i.Contents).Text #error ScrSection has no attribute TitleOA
                # return sectionHeader
                
        # titleIndex = []
        # def title():
        
            # for obj in DB.ObjectsIn(IScrSectionRepository):
                # # # bookCount = obj.TranslatedScriptureOA.ScriptureBooksOS.Count
                # # for i, book in enumerate(obj.ScriptureBooksOS):
                # # for section in obj.SectionOS:
                # titleIndex.append(obj.VerseRefEnd)
                # endRef = obj.VerseRefEnd
                # if endRef == 8002023:
                    # for heading in obj.HeadingOA.ParagraphsOS:
                        # headingFinal = ITsString(heading.Contents).Text
                        # return headingFinal
                    
                    
                # count = section.Count
                    # titleIndex.append(endRef)
                        
            # for a in DB.ObjectsIn(IScrSectionRepository):            
                # for b in a.HeadingOA.ParagraphsOS:
                    # endRef = b.VerseRefEnd
                    # # endRef = ITsString(b.endRef).Text
                    # #form = ITsString(entry.LexemeFormOA.Form.get_String(WSHandle)).Text
                    # append.titleIndex(endRef)
                    
            #para = book.TitleOA.ParagraphOS
                
        titleGroup() #run the loop to get the list populated        
        report.Info("titleGroupIndex is: %s" % titleGroupIndex)
          
        # sectionHead()          
        report.Info("sectionHeadIndex is: %s" % sectionHeadIndex)
        
        # title()
        report.Info("titleIndex is: %s" % titleIndex)
        # report.Info("title count is: %s" % title())
        
        titleGroup = ET.SubElement(bookElement, 'titleGroup', short=titleGroupIndex[i])   #Evvelki bâb        
        report.Info("titleGroup is: %s" % titleGroupIndex[i])  
        report.Info("1")
        title = ET.SubElement(titleGroup, 'title', type="main")
        report.Info("2")
        trGroup = ET.SubElement(title, 'trGroup')
        report.Info("3")
        tr = ET.SubElement(trGroup, 'tr')   
        report.Info("4")
        tr.text = titleGroupIndex[i] #Rût 
        report.Info("sectionHead is: %s" % sectionHeadIndex[i])
        report.Info("5")

        section = ET.SubElement(bookElement, 'section')
        report.Info("6")
        sectionHead = ET.SubElement(section, 'sectionHead')        
        report.Info("7")
        trGroup = ET.SubElement(sectionHead, 'trGroup')        
        report.Info("8")
        tr = ET.SubElement(trGroup, 'tr')    
        report.Info("9")        
        report.Info("10")
        

        # for obj in DB.ObjectsIn(ILangProjectRepository):
            # for book in obj.TranslatedScriptureOA.ScriptureBooksOS:
            # # for book in obj.ScriptureBooksOS.TitleOA.ParagraphOS:  
                # text = ITsString(book.Name.BestVernacularAlternative).Text
                # report.Info("Book Name is: %s" % text)
                # for i in book.TitleOA.ParagraphOS: #'StText' has no object 'ParagraphOS'
                    # titletrGrouptr = ITsString(titleGrouptr.Text.BestVernacularAlternative).Text
                    # report.Info("titletrGrouptr is: %s" % titletrGrouptr)                    
                    
        # report.Info("CanonicalNum is: %s" % sectionHead(book))
        
        
        

        # for obj in DB.ObjectsIn(ILangProjectRepository):            
            # for book in obj.TranslatedScriptureOA.ScriptureBooksOS:
                # titleGroupBookname = ITsString(book.Name.BestVernacularAlternative).Text
                # report.Info("titleGroupBookname is: %s" % titleGroupBookname)
                # for section in book.SectionOS:
                    # for heading in section.HeadingOA.ParagraphOS:
                        # text = ITsString(heading.Text).Text
                        # report.Info("text is: %s" % text)


        # ExportBookTitle(book, bookElement)
        
        # for obj in DB.ObjectsIn(IScrBookRepository):            
        # #    bookCount = obj.TranslatedScriptureOA.ScriptureBooksOS.Count        
            # # for p in obj.TranslatedScriptureOA.ScriptureBooksOS:
            # for r in obj.TitleOA.ParagraphOS:
                # sectionTitle = ITsString(r).Text
                # report.Info("sectionTitle is: %s " % sectionTitle) 

                # titlepara = book.TitleOA.ParagraphsOS.Count
                # report.Info("titlepara is: %s" % titlepara)
                # for titleGrouptr in book.TitleOA.ParagraphsOS:
                    # titletrGrouptr = ITsString(titleGrouptr).Text
                    # report.Info("titletrGrouptr is: %s" % titletrGrouptr)
                    
                
                # for section in book.SectionOS: #ScrBook object has no attribute SectionOS
                    # report.Info("section object is: %s" % section)
                
                
                # if book.TitleOA:
                    # contents = book.TitleOA
                    # report.Info("Title objects are: %s" % contents)
                    # if contents.ParagraphOS:
                        # para = contents.ParagraphOS
                        # report.Info("Paragraph objects are: %s" % para)
                        # for title in contents.ParagraphOS:                            
                            # bookname = ITsString(title.Name.BestVernacularAlternative).Text
                            # # sectionTitle = ITsString(title).Text
                            # # report.Info("sectionTitle is: %s" % sectionTitle)
                            # # report.Info("Canonical number is: %s" % book.CanonicalNum)
                            # # report.Info("Paragraph Section count is: %s" % book.TitleOS.ParagraphOS.Count)
                            
        # m_scr = cache.LangProject.TranslatedScriptureOA;                  
        #book = m_scr.ScriptureOS.TitleOA.ParagraphOS;
        #book.Name.BestVernacularAlternative
        # foreach (IStTxtPara para in book.TitleOA.ParagraphsOS
        
        # //    "Book has {0} title paragraphs and {1} sections",
			# //    book.TitleOA.ParagraphsOS.Count, book.SectionsOS.Count));
        
                
        # for obj in DB.ObjectsIn(ILangProjectRepository):              
            # for p in obj.TranslatedScriptureOA.ScriptureBooksOS:
                # for r in obj.TranslatedScriptureOA.ScriptureBooksOS:
                # if ITsString(p.Contents).Text:
                    # #name = ITsString(p.Contents).Text
                    # report.Info(ITsString(p.Contents).Text)                    

    #----------------------------------------------------------------   

        
        #Evvelki bâb
        # for p in t.HeadingOA.ParagraphOS).Text:
            # sectionTitle = ITsString(p.Contents).Text)
            # report.Info("sectionTitle is: %s " % sectionTitle)  

        #Rût
        # for p in t.TitleOA.ParagraphOS).Text:
            # sectionTitle = ITsString(p.Contents).Text)
            # report.Info("sectionTitle is: %s " % sectionTitle)  
        
                                  
                    
#----------------------------------------------------------------
        
    ExportTE()
    ExportScripture()   
    
    xmlfile = 'osm.oxes'
    tree = ET.ElementTree(oxes)
    writing = tree.write(xmlfile, encoding="utf-8", xml_declaration=True)                                     
#----------------------------------------------------------------
# The name 'FlexToolsModule' must be defined like this:

FlexToolsModule = FlexToolsModuleClass(runFunction = MainFunction,
                                       docs = docs)
            
#----------------------------------------------------------------
if __name__ == '__main__':
    FlexToolsModule.Help()
